(set not (lambda (x) (if x nil true)))
(set snd (lambda (lst) (car (cdr lst))))
(set build-let (lambda (binding body) (list 'lambda (list (car binding)) body))) 
(set let (lambda (binding body) ((eval (build-let binding body)) (eval (snd binding)) )) )
(set on-head (lambda (f lst) (f (car lst))))
(set map (lambda (f lst) (if lst (cons (on-head f lst) (map f (cdr lst))) nil)))
(set id (lambda (x) x))
(set string->list (lambda (str) (map id str)))
(set copy-list string->list)
(set append (lambda (lhs rhs) (if (not lhs) rhs (cons (car lhs) (append (cdr lhs) rhs)))))
(set fold (lambda (f final lst) (if (not lst) final (f (car lst) (fold f final (cdr lst))))))
(set concat (lambda (lst) (fold append nil lst)))
(set compose (lambda (f g) (lambda (x) (f (g x)))))
(set curry (lambda (f) (lambda (x) (lambda (y) (f x y)))))
(set uncurry (lambda (f) (lambda (x y) ((f x) y))))
(set concatMap (uncurry (lambda (f) (compose concat ((curry map) f)))))
